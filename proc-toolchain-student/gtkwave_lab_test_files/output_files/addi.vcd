$date
	Thu Feb 20 11:49:46 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Wrapper_tb $end
$var wire 8 ! regA [7:0] $end
$var wire 1 " rwe $end
$var wire 3 # rs1_test [2:0] $end
$var wire 3 $ rs1_in [2:0] $end
$var wire 3 % rs [2:0] $end
$var wire 3 & rd [2:0] $end
$var wire 8 ' rData [7:0] $end
$var wire 15 ( instData [14:0] $end
$var parameter 32 ) DEFAULT_CYCLES $end
$var parameter 232 * DIR $end
$var parameter 32 + FILE $end
$var parameter 80 , MEM_DIR $end
$var parameter 104 - OUT_DIR $end
$var parameter 152 . VERIF_DIR $end
$var reg 1 / clock $end
$var reg 32 0 exp_result [31:0] $end
$var reg 121 1 exp_text [120:0] $end
$var reg 8 2 instAddr [7:0] $end
$var reg 10 3 num_cycles [9:0] $end
$var reg 1 4 reset $end
$var reg 1 5 testMode $end
$var reg 1 6 verify $end
$var integer 32 7 cycles [31:0] $end
$var integer 32 8 errors [31:0] $end
$var integer 32 9 expFile [31:0] $end
$var integer 32 : expScan [31:0] $end
$var integer 32 ; reg_to_test [31:0] $end
$scope module CPU $end
$var wire 8 < address_imem [7:0] $end
$var wire 1 / clock $end
$var wire 1 " ctrl_writeEnable $end
$var wire 8 = data_readReg [7:0] $end
$var wire 8 > data_writeReg [7:0] $end
$var wire 1 4 reset $end
$var wire 8 ? xwo_out [7:0] $end
$var wire 15 @ xwinsn_out [14:0] $end
$var wire 15 A q_imem [14:0] $end
$var wire 8 B immediate [7:0] $end
$var wire 15 C fdinsn_out [14:0] $end
$var wire 15 D dxinsn_out [14:0] $end
$var wire 8 E dxa_out [7:0] $end
$var wire 3 F ctrl_writeReg [2:0] $end
$var wire 3 G ctrl_readReg [2:0] $end
$var wire 8 H alu_res [7:0] $end
$var wire 8 I alu_out [7:0] $end
$var wire 8 J alu2_out [7:0] $end
$scope module ALU $end
$var wire 1 K ctrl_ALUopcode $end
$var wire 8 L data_operandB [7:0] $end
$var wire 8 M sub_result [7:0] $end
$var wire 8 N data_result [7:0] $end
$var wire 8 O data_operandA [7:0] $end
$var wire 8 P add_result [7:0] $end
$scope module add $end
$var wire 1 Q carry_in $end
$var wire 8 R data_operandB [7:0] $end
$var wire 8 S data_result [7:0] $end
$var wire 8 T data_operandA [7:0] $end
$upscope $end
$scope module sub $end
$var wire 1 U carry_in $end
$var wire 8 V data_operandB [7:0] $end
$var wire 8 W data_result [7:0] $end
$var wire 8 X data_operandA [7:0] $end
$upscope $end
$upscope $end
$scope module ALU2 $end
$var wire 1 Y ctrl_ALUopcode $end
$var wire 8 Z data_operandB [7:0] $end
$var wire 8 [ sub_result [7:0] $end
$var wire 8 \ data_result [7:0] $end
$var wire 8 ] data_operandA [7:0] $end
$var wire 8 ^ add_result [7:0] $end
$scope module add $end
$var wire 1 _ carry_in $end
$var wire 8 ` data_operandB [7:0] $end
$var wire 8 a data_result [7:0] $end
$var wire 8 b data_operandA [7:0] $end
$upscope $end
$scope module sub $end
$var wire 1 c carry_in $end
$var wire 8 d data_operandB [7:0] $end
$var wire 8 e data_result [7:0] $end
$var wire 8 f data_operandA [7:0] $end
$upscope $end
$upscope $end
$scope module DX_A $end
$var wire 1 g clock $end
$var wire 8 h dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 i we $end
$var wire 8 j dataRead [7:0] $end
$var parameter 32 k WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 l i $end
$scope module d_flip_flop $end
$var wire 1 g clk $end
$var wire 1 4 clr $end
$var wire 1 m d $end
$var wire 1 i en $end
$var reg 1 n q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 o i $end
$scope module d_flip_flop $end
$var wire 1 g clk $end
$var wire 1 4 clr $end
$var wire 1 p d $end
$var wire 1 i en $end
$var reg 1 q q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 r i $end
$scope module d_flip_flop $end
$var wire 1 g clk $end
$var wire 1 4 clr $end
$var wire 1 s d $end
$var wire 1 i en $end
$var reg 1 t q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 u i $end
$scope module d_flip_flop $end
$var wire 1 g clk $end
$var wire 1 4 clr $end
$var wire 1 v d $end
$var wire 1 i en $end
$var reg 1 w q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 x i $end
$scope module d_flip_flop $end
$var wire 1 g clk $end
$var wire 1 4 clr $end
$var wire 1 y d $end
$var wire 1 i en $end
$var reg 1 z q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 { i $end
$scope module d_flip_flop $end
$var wire 1 g clk $end
$var wire 1 4 clr $end
$var wire 1 | d $end
$var wire 1 i en $end
$var reg 1 } q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 ~ i $end
$scope module d_flip_flop $end
$var wire 1 g clk $end
$var wire 1 4 clr $end
$var wire 1 !" d $end
$var wire 1 i en $end
$var reg 1 "" q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 #" i $end
$scope module d_flip_flop $end
$var wire 1 g clk $end
$var wire 1 4 clr $end
$var wire 1 $" d $end
$var wire 1 i en $end
$var reg 1 %" q $end
$upscope $end
$upscope $end
$upscope $end
$scope module DX_INSN $end
$var wire 1 &" clock $end
$var wire 1 4 reset $end
$var wire 1 '" we $end
$var wire 15 (" dataWrite [14:0] $end
$var wire 15 )" dataRead [14:0] $end
$var parameter 32 *" WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 +" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 ," d $end
$var wire 1 '" en $end
$var reg 1 -" q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 ." i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 /" d $end
$var wire 1 '" en $end
$var reg 1 0" q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 1" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 2" d $end
$var wire 1 '" en $end
$var reg 1 3" q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 4" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 5" d $end
$var wire 1 '" en $end
$var reg 1 6" q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 7" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 8" d $end
$var wire 1 '" en $end
$var reg 1 9" q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 :" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 ;" d $end
$var wire 1 '" en $end
$var reg 1 <" q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 =" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 >" d $end
$var wire 1 '" en $end
$var reg 1 ?" q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 @" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 A" d $end
$var wire 1 '" en $end
$var reg 1 B" q $end
$upscope $end
$upscope $end
$scope begin loop1[8] $end
$var parameter 5 C" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 D" d $end
$var wire 1 '" en $end
$var reg 1 E" q $end
$upscope $end
$upscope $end
$scope begin loop1[9] $end
$var parameter 5 F" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 G" d $end
$var wire 1 '" en $end
$var reg 1 H" q $end
$upscope $end
$upscope $end
$scope begin loop1[10] $end
$var parameter 5 I" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 J" d $end
$var wire 1 '" en $end
$var reg 1 K" q $end
$upscope $end
$upscope $end
$scope begin loop1[11] $end
$var parameter 5 L" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 M" d $end
$var wire 1 '" en $end
$var reg 1 N" q $end
$upscope $end
$upscope $end
$scope begin loop1[12] $end
$var parameter 5 O" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 P" d $end
$var wire 1 '" en $end
$var reg 1 Q" q $end
$upscope $end
$upscope $end
$scope begin loop1[13] $end
$var parameter 5 R" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 S" d $end
$var wire 1 '" en $end
$var reg 1 T" q $end
$upscope $end
$upscope $end
$scope begin loop1[14] $end
$var parameter 5 U" i $end
$scope module d_flip_flop $end
$var wire 1 &" clk $end
$var wire 1 4 clr $end
$var wire 1 V" d $end
$var wire 1 '" en $end
$var reg 1 W" q $end
$upscope $end
$upscope $end
$upscope $end
$scope module FD_INSN $end
$var wire 1 X" clock $end
$var wire 1 4 reset $end
$var wire 1 Y" we $end
$var wire 15 Z" dataWrite [14:0] $end
$var wire 15 [" dataRead [14:0] $end
$var parameter 32 \" WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 ]" i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 ^" d $end
$var wire 1 Y" en $end
$var reg 1 _" q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 `" i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 a" d $end
$var wire 1 Y" en $end
$var reg 1 b" q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 c" i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 d" d $end
$var wire 1 Y" en $end
$var reg 1 e" q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 f" i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 g" d $end
$var wire 1 Y" en $end
$var reg 1 h" q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 i" i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 j" d $end
$var wire 1 Y" en $end
$var reg 1 k" q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 l" i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 m" d $end
$var wire 1 Y" en $end
$var reg 1 n" q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 o" i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 p" d $end
$var wire 1 Y" en $end
$var reg 1 q" q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 r" i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 s" d $end
$var wire 1 Y" en $end
$var reg 1 t" q $end
$upscope $end
$upscope $end
$scope begin loop1[8] $end
$var parameter 5 u" i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 v" d $end
$var wire 1 Y" en $end
$var reg 1 w" q $end
$upscope $end
$upscope $end
$scope begin loop1[9] $end
$var parameter 5 x" i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 y" d $end
$var wire 1 Y" en $end
$var reg 1 z" q $end
$upscope $end
$upscope $end
$scope begin loop1[10] $end
$var parameter 5 {" i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 |" d $end
$var wire 1 Y" en $end
$var reg 1 }" q $end
$upscope $end
$upscope $end
$scope begin loop1[11] $end
$var parameter 5 ~" i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 !# d $end
$var wire 1 Y" en $end
$var reg 1 "# q $end
$upscope $end
$upscope $end
$scope begin loop1[12] $end
$var parameter 5 ## i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 $# d $end
$var wire 1 Y" en $end
$var reg 1 %# q $end
$upscope $end
$upscope $end
$scope begin loop1[13] $end
$var parameter 5 &# i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 '# d $end
$var wire 1 Y" en $end
$var reg 1 (# q $end
$upscope $end
$upscope $end
$scope begin loop1[14] $end
$var parameter 5 )# i $end
$scope module d_flip_flop $end
$var wire 1 X" clk $end
$var wire 1 4 clr $end
$var wire 1 *# d $end
$var wire 1 Y" en $end
$var reg 1 +# q $end
$upscope $end
$upscope $end
$upscope $end
$scope module XW_INSN $end
$var wire 1 ,# clock $end
$var wire 15 -# dataWrite [14:0] $end
$var wire 1 4 reset $end
$var wire 1 .# we $end
$var wire 15 /# dataRead [14:0] $end
$var parameter 32 0# WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 1# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 2# d $end
$var wire 1 .# en $end
$var reg 1 3# q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 4# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 5# d $end
$var wire 1 .# en $end
$var reg 1 6# q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 7# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 8# d $end
$var wire 1 .# en $end
$var reg 1 9# q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 :# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 ;# d $end
$var wire 1 .# en $end
$var reg 1 <# q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 =# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 ># d $end
$var wire 1 .# en $end
$var reg 1 ?# q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 @# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 A# d $end
$var wire 1 .# en $end
$var reg 1 B# q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 C# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 D# d $end
$var wire 1 .# en $end
$var reg 1 E# q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 F# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 G# d $end
$var wire 1 .# en $end
$var reg 1 H# q $end
$upscope $end
$upscope $end
$scope begin loop1[8] $end
$var parameter 5 I# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 J# d $end
$var wire 1 .# en $end
$var reg 1 K# q $end
$upscope $end
$upscope $end
$scope begin loop1[9] $end
$var parameter 5 L# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 M# d $end
$var wire 1 .# en $end
$var reg 1 N# q $end
$upscope $end
$upscope $end
$scope begin loop1[10] $end
$var parameter 5 O# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 P# d $end
$var wire 1 .# en $end
$var reg 1 Q# q $end
$upscope $end
$upscope $end
$scope begin loop1[11] $end
$var parameter 5 R# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 S# d $end
$var wire 1 .# en $end
$var reg 1 T# q $end
$upscope $end
$upscope $end
$scope begin loop1[12] $end
$var parameter 5 U# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 V# d $end
$var wire 1 .# en $end
$var reg 1 W# q $end
$upscope $end
$upscope $end
$scope begin loop1[13] $end
$var parameter 5 X# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 Y# d $end
$var wire 1 .# en $end
$var reg 1 Z# q $end
$upscope $end
$upscope $end
$scope begin loop1[14] $end
$var parameter 5 [# i $end
$scope module d_flip_flop $end
$var wire 1 ,# clk $end
$var wire 1 4 clr $end
$var wire 1 \# d $end
$var wire 1 .# en $end
$var reg 1 ]# q $end
$upscope $end
$upscope $end
$upscope $end
$scope module XW_O $end
$var wire 1 ^# clock $end
$var wire 8 _# dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 `# we $end
$var wire 8 a# dataRead [7:0] $end
$var parameter 32 b# WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 c# i $end
$scope module d_flip_flop $end
$var wire 1 ^# clk $end
$var wire 1 4 clr $end
$var wire 1 d# d $end
$var wire 1 `# en $end
$var reg 1 e# q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 f# i $end
$scope module d_flip_flop $end
$var wire 1 ^# clk $end
$var wire 1 4 clr $end
$var wire 1 g# d $end
$var wire 1 `# en $end
$var reg 1 h# q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 i# i $end
$scope module d_flip_flop $end
$var wire 1 ^# clk $end
$var wire 1 4 clr $end
$var wire 1 j# d $end
$var wire 1 `# en $end
$var reg 1 k# q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 l# i $end
$scope module d_flip_flop $end
$var wire 1 ^# clk $end
$var wire 1 4 clr $end
$var wire 1 m# d $end
$var wire 1 `# en $end
$var reg 1 n# q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 o# i $end
$scope module d_flip_flop $end
$var wire 1 ^# clk $end
$var wire 1 4 clr $end
$var wire 1 p# d $end
$var wire 1 `# en $end
$var reg 1 q# q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 r# i $end
$scope module d_flip_flop $end
$var wire 1 ^# clk $end
$var wire 1 4 clr $end
$var wire 1 s# d $end
$var wire 1 `# en $end
$var reg 1 t# q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 u# i $end
$scope module d_flip_flop $end
$var wire 1 ^# clk $end
$var wire 1 4 clr $end
$var wire 1 v# d $end
$var wire 1 `# en $end
$var reg 1 w# q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 x# i $end
$scope module d_flip_flop $end
$var wire 1 ^# clk $end
$var wire 1 4 clr $end
$var wire 1 y# d $end
$var wire 1 `# en $end
$var reg 1 z# q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module InstMem $end
$var wire 8 {# addr [7:0] $end
$var wire 1 / clk $end
$var parameter 32 |# ADDRESS_WIDTH $end
$var parameter 32 }# DATA_WIDTH $end
$var parameter 32 ~# DEPTH $end
$var parameter 376 !$ MEMFILE $end
$var reg 15 "$ dataOut [14:0] $end
$upscope $end
$scope module RegisterFile $end
$var wire 1 / clock $end
$var wire 3 #$ ctrl_readReg [2:0] $end
$var wire 1 4 ctrl_reset $end
$var wire 1 " ctrl_writeEnable $end
$var wire 3 $$ ctrl_writeReg [2:0] $end
$var wire 8 %$ data_readReg [7:0] $end
$var wire 8 &$ data_writeReg [7:0] $end
$var wire 8 '$ decoded_writeReg [7:0] $end
$var wire 8 ($ decoded_readReg [7:0] $end
$var parameter 32 )$ REGBITS $end
$var parameter 32 *$ SIZE $end
$var parameter 32 +$ WIDTH $end
$scope begin loop1[1] $end
$var wire 8 ,$ regOut [7:0] $end
$var parameter 2 -$ i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 .$ dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 /$ we $end
$var wire 8 0$ dataRead [7:0] $end
$var parameter 32 1$ WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 2$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 3$ d $end
$var wire 1 /$ en $end
$var reg 1 4$ q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 5$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 6$ d $end
$var wire 1 /$ en $end
$var reg 1 7$ q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 8$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 9$ d $end
$var wire 1 /$ en $end
$var reg 1 :$ q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 ;$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 <$ d $end
$var wire 1 /$ en $end
$var reg 1 =$ q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 >$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 ?$ d $end
$var wire 1 /$ en $end
$var reg 1 @$ q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 A$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 B$ d $end
$var wire 1 /$ en $end
$var reg 1 C$ q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 D$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 E$ d $end
$var wire 1 /$ en $end
$var reg 1 F$ q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 G$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 H$ d $end
$var wire 1 /$ en $end
$var reg 1 I$ q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var wire 8 J$ regOut [7:0] $end
$var parameter 3 K$ i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 L$ dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 M$ we $end
$var wire 8 N$ dataRead [7:0] $end
$var parameter 32 O$ WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 P$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 Q$ d $end
$var wire 1 M$ en $end
$var reg 1 R$ q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 S$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 T$ d $end
$var wire 1 M$ en $end
$var reg 1 U$ q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 V$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 W$ d $end
$var wire 1 M$ en $end
$var reg 1 X$ q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 Y$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 Z$ d $end
$var wire 1 M$ en $end
$var reg 1 [$ q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 \$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 ]$ d $end
$var wire 1 M$ en $end
$var reg 1 ^$ q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 _$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 `$ d $end
$var wire 1 M$ en $end
$var reg 1 a$ q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 b$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 c$ d $end
$var wire 1 M$ en $end
$var reg 1 d$ q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 e$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 f$ d $end
$var wire 1 M$ en $end
$var reg 1 g$ q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var wire 8 h$ regOut [7:0] $end
$var parameter 3 i$ i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 j$ dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 k$ we $end
$var wire 8 l$ dataRead [7:0] $end
$var parameter 32 m$ WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 n$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 o$ d $end
$var wire 1 k$ en $end
$var reg 1 p$ q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 q$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 r$ d $end
$var wire 1 k$ en $end
$var reg 1 s$ q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 t$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 u$ d $end
$var wire 1 k$ en $end
$var reg 1 v$ q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 w$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 x$ d $end
$var wire 1 k$ en $end
$var reg 1 y$ q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 z$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 {$ d $end
$var wire 1 k$ en $end
$var reg 1 |$ q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 }$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 ~$ d $end
$var wire 1 k$ en $end
$var reg 1 !% q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 "% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 #% d $end
$var wire 1 k$ en $end
$var reg 1 $% q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 %% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 &% d $end
$var wire 1 k$ en $end
$var reg 1 '% q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var wire 8 (% regOut [7:0] $end
$var parameter 4 )% i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 *% dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 +% we $end
$var wire 8 ,% dataRead [7:0] $end
$var parameter 32 -% WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 .% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 /% d $end
$var wire 1 +% en $end
$var reg 1 0% q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 1% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 2% d $end
$var wire 1 +% en $end
$var reg 1 3% q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 4% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 5% d $end
$var wire 1 +% en $end
$var reg 1 6% q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 7% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 8% d $end
$var wire 1 +% en $end
$var reg 1 9% q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 :% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 ;% d $end
$var wire 1 +% en $end
$var reg 1 <% q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 =% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 >% d $end
$var wire 1 +% en $end
$var reg 1 ?% q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 @% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 A% d $end
$var wire 1 +% en $end
$var reg 1 B% q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 C% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 D% d $end
$var wire 1 +% en $end
$var reg 1 E% q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var wire 8 F% regOut [7:0] $end
$var parameter 4 G% i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 H% dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 I% we $end
$var wire 8 J% dataRead [7:0] $end
$var parameter 32 K% WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 L% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 M% d $end
$var wire 1 I% en $end
$var reg 1 N% q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 O% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 P% d $end
$var wire 1 I% en $end
$var reg 1 Q% q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 R% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 S% d $end
$var wire 1 I% en $end
$var reg 1 T% q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 U% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 V% d $end
$var wire 1 I% en $end
$var reg 1 W% q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 X% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 Y% d $end
$var wire 1 I% en $end
$var reg 1 Z% q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 [% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 \% d $end
$var wire 1 I% en $end
$var reg 1 ]% q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 ^% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 _% d $end
$var wire 1 I% en $end
$var reg 1 `% q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 a% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 b% d $end
$var wire 1 I% en $end
$var reg 1 c% q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var wire 8 d% regOut [7:0] $end
$var parameter 4 e% i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 f% dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 g% we $end
$var wire 8 h% dataRead [7:0] $end
$var parameter 32 i% WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 j% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 k% d $end
$var wire 1 g% en $end
$var reg 1 l% q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 m% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 n% d $end
$var wire 1 g% en $end
$var reg 1 o% q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 p% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 q% d $end
$var wire 1 g% en $end
$var reg 1 r% q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 s% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 t% d $end
$var wire 1 g% en $end
$var reg 1 u% q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 v% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 w% d $end
$var wire 1 g% en $end
$var reg 1 x% q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 y% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 z% d $end
$var wire 1 g% en $end
$var reg 1 {% q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 |% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 }% d $end
$var wire 1 g% en $end
$var reg 1 ~% q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 !& i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 "& d $end
$var wire 1 g% en $end
$var reg 1 #& q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var wire 8 $& regOut [7:0] $end
$var parameter 4 %& i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 && dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 '& we $end
$var wire 8 (& dataRead [7:0] $end
$var parameter 32 )& WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 *& i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 +& d $end
$var wire 1 '& en $end
$var reg 1 ,& q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 -& i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 .& d $end
$var wire 1 '& en $end
$var reg 1 /& q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 0& i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 1& d $end
$var wire 1 '& en $end
$var reg 1 2& q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 3& i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 4& d $end
$var wire 1 '& en $end
$var reg 1 5& q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 6& i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 7& d $end
$var wire 1 '& en $end
$var reg 1 8& q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 9& i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 :& d $end
$var wire 1 '& en $end
$var reg 1 ;& q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 <& i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 =& d $end
$var wire 1 '& en $end
$var reg 1 >& q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 ?& i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 @& d $end
$var wire 1 '& en $end
$var reg 1 A& q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module read_decode $end
$var wire 1 B& enable $end
$var wire 3 C& select [2:0] $end
$var wire 8 D& out [7:0] $end
$var parameter 32 E& SELECT_BITS $end
$var parameter 32 F& WIDTH $end
$upscope $end
$scope module write_reg_decode $end
$var wire 1 " enable $end
$var wire 3 G& select [2:0] $end
$var wire 8 H& out [7:0] $end
$var parameter 32 I& SELECT_BITS $end
$var parameter 32 J& WIDTH $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 J&
b11 I&
b1000 F&
b11 E&
b111 ?&
b110 <&
b101 9&
b100 6&
b11 3&
b10 0&
b1 -&
b0 *&
b1000 )&
b111 %&
b111 !&
b110 |%
b101 y%
b100 v%
b11 s%
b10 p%
b1 m%
b0 j%
b1000 i%
b110 e%
b111 a%
b110 ^%
b101 [%
b100 X%
b11 U%
b10 R%
b1 O%
b0 L%
b1000 K%
b101 G%
b111 C%
b110 @%
b101 =%
b100 :%
b11 7%
b10 4%
b1 1%
b0 .%
b1000 -%
b100 )%
b111 %%
b110 "%
b101 }$
b100 z$
b11 w$
b10 t$
b1 q$
b0 n$
b1000 m$
b11 i$
b111 e$
b110 b$
b101 _$
b100 \$
b11 Y$
b10 V$
b1 S$
b0 P$
b1000 O$
b10 K$
b111 G$
b110 D$
b101 A$
b100 >$
b11 ;$
b10 8$
b1 5$
b0 2$
b1000 1$
b1 -$
b1000 +$
b1000 *$
b11 )$
b10111000101110001011110010111000101110001011110110011101110100011010110111011101100001011101100110010101011111011011000110000101100010010111110111010001100101011100110111010001011111011001100110100101101100011001010111001100101111011011010110010101101101010111110110011001101001011011000110010101110011001011110110000101100100011001000110100100101110011011010110010101101101 !$
b1000000 ~#
b1111 }#
b1000 |#
b111 x#
b110 u#
b101 r#
b100 o#
b11 l#
b10 i#
b1 f#
b0 c#
b1000 b#
b1110 [#
b1101 X#
b1100 U#
b1011 R#
b1010 O#
b1001 L#
b1000 I#
b111 F#
b110 C#
b101 @#
b100 =#
b11 :#
b10 7#
b1 4#
b0 1#
b1111 0#
b1110 )#
b1101 &#
b1100 ##
b1011 ~"
b1010 {"
b1001 x"
b1000 u"
b111 r"
b110 o"
b101 l"
b100 i"
b11 f"
b10 c"
b1 `"
b0 ]"
b1111 \"
b1110 U"
b1101 R"
b1100 O"
b1011 L"
b1010 I"
b1001 F"
b1000 C"
b111 @"
b110 ="
b101 :"
b100 7"
b11 4"
b10 1"
b1 ."
b0 +"
b1111 *"
b111 #"
b110 ~
b101 {
b100 x
b11 u
b10 r
b1 o
b0 l
b1000 k
b1110110011001010111001001101001011001100110100101100011011000010111010001101001011011110110111001011111011001100110100101101100011001010111001100101111 .
b1101111011101010111010001110000011101010111010001011111011001100110100101101100011001010111001100101111 -
b1101101011001010110110101011111011001100110100101101100011001010111001100101111 ,
b1100001011001000110010001101001 +
b10111000101110001011110010111000101110001011110110011101110100011010110111011101100001011101100110010101011111011011000110000101100010010111110111010001100101011100110111010001011111011001100110100101101100011001010111001100101111 *
b11111111 )
$end
#0
$dumpvars
b1 H&
b0 G&
b1 D&
b0 C&
1B&
0A&
0@&
0>&
0=&
0;&
0:&
08&
07&
05&
04&
02&
01&
0/&
0.&
0,&
0+&
b0 (&
0'&
b0 &&
b0 $&
0#&
0"&
0~%
0}%
0{%
0z%
0x%
0w%
0u%
0t%
0r%
0q%
0o%
0n%
0l%
0k%
b0 h%
0g%
b0 f%
b0 d%
0c%
0b%
0`%
0_%
0]%
0\%
0Z%
0Y%
0W%
0V%
0T%
0S%
0Q%
0P%
0N%
0M%
b0 J%
0I%
b0 H%
b0 F%
0E%
0D%
0B%
0A%
0?%
0>%
0<%
0;%
09%
08%
06%
05%
03%
02%
00%
0/%
b0 ,%
0+%
b0 *%
b0 (%
0'%
0&%
0$%
0#%
0!%
0~$
0|$
0{$
0y$
0x$
0v$
0u$
0s$
0r$
0p$
0o$
b0 l$
0k$
b0 j$
b0 h$
0g$
0f$
0d$
0c$
0a$
0`$
0^$
0]$
0[$
0Z$
0X$
0W$
0U$
0T$
0R$
0Q$
b0 N$
0M$
b0 L$
b0 J$
0I$
0H$
0F$
0E$
0C$
0B$
0@$
0?$
0=$
0<$
0:$
09$
07$
06$
04$
03$
b0 0$
0/$
b0 .$
b0 ,$
b1 ($
b1 '$
b0 &$
b0 %$
b0 $$
b0 #$
b0 "$
b0 {#
0z#
0y#
0w#
0v#
0t#
0s#
0q#
0p#
0n#
0m#
0k#
0j#
0h#
0g#
0e#
0d#
b0 a#
1`#
b0 _#
1^#
0]#
0\#
0Z#
0Y#
0W#
0V#
0T#
0S#
0Q#
0P#
0N#
0M#
0K#
0J#
0H#
0G#
0E#
0D#
0B#
0A#
0?#
0>#
0<#
0;#
09#
08#
06#
05#
03#
02#
b0 /#
1.#
b0 -#
1,#
0+#
0*#
0(#
0'#
0%#
0$#
0"#
0!#
0}"
0|"
0z"
0y"
0w"
0v"
0t"
0s"
0q"
0p"
0n"
0m"
0k"
0j"
0h"
0g"
0e"
0d"
0b"
0a"
0_"
0^"
b0 ["
b0 Z"
1Y"
1X"
0W"
0V"
0T"
0S"
0Q"
0P"
0N"
0M"
0K"
0J"
0H"
0G"
0E"
0D"
0B"
0A"
0?"
0>"
0<"
0;"
09"
08"
06"
05"
03"
02"
00"
0/"
0-"
0,"
b0 )"
b0 ("
1'"
1&"
0%"
0$"
0""
0!"
0}
0|
0z
0y
0w
0v
0t
0s
0q
0p
0n
0m
b0 j
1i
b0 h
1g
b0 f
b0 e
b11111111 d
1c
b0 b
b0 a
b0 `
0_
b0 ^
b0 ]
b0 \
b0 [
b0 Z
1Y
b0 X
b0 W
b11111111 V
1U
b0 T
b0 S
b0 R
0Q
b0 P
b0 O
b0 N
b0 M
b0 L
0K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b1 :
b10000000000000000000000000000011 9
b0 8
b0 7
16
05
14
b11110 3
b0 2
bx 1
bx 0
0/
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
1"
b0 !
$end
#1000
04
#10000
0X"
0g
0&"
0^#
0,#
1/
#20000
b1 2
b1 <
b1 {#
1X"
1g
1&"
1^#
1,#
b1 7
0/
#30000
1!#
1v"
1^"
b100100000001 (
b100100000001 A
b100100000001 Z"
b100100000001 "$
0X"
0g
0&"
0^#
0,#
1/
#40000
b10 ($
b10 D&
b1 $
b1 #$
b1 C&
1,"
1D"
b1 %
b1 G
1M"
1_"
1w"
b100100000001 C
b100100000001 ("
b100100000001 ["
1"#
b10 2
b10 <
b10 {#
1X"
1g
1&"
1^#
1,#
b10 7
0/
#50000
1$#
0!#
1y"
0v"
1a"
0^"
b1001000000010 (
b1001000000010 A
b1001000000010 Z"
b1001000000010 "$
0X"
0g
0&"
0^#
0,#
1/
#60000
b0 !
b0 =
b0 h
b0 %$
1d#
b1 H
b1 _#
b11111111 J
b11111111 \
b100 ($
b100 D&
b10 $
b10 #$
b10 C&
b11111111 M
b11111111 W
b11111110 V
b1 I
b1 N
b11111111 [
b11111111 e
b11111110 d
1P"
0M"
1G"
0D"
b10 %
b10 G
1/"
0,"
1S#
1J#
12#
b1 P
b1 S
b1 ^
b1 a
b1 B
b1 L
b1 R
b1 Z
b1 `
1%#
0"#
1z"
0w"
1b"
b1001000000010 C
b1001000000010 ("
b1001000000010 ["
0_"
1N"
1E"
b100100000001 D
b100100000001 )"
b100100000001 -#
1-"
b11 2
b11 <
b11 {#
1X"
1g
1&"
1^#
1,#
b11 7
0/
#70000
1!#
1v"
1^"
b1101100000011 (
b1101100000011 A
b1101100000011 Z"
b1101100000011 "$
0X"
0g
0&"
0^#
0,#
1/
#80000
b0 !
b0 =
b0 h
b0 %$
0d#
1g#
b10 H
b10 _#
b11111110 J
b11111110 \
b1000 ($
b1000 D&
b11 $
b11 #$
b11 C&
b11111110 M
b11111110 W
b11111101 V
b10 I
b10 N
b11111110 [
b11111110 e
b11111101 d
1/$
1,"
1D"
b11 %
b11 G
1M"
02#
15#
b10 P
b10 S
b10 ^
b10 a
b10 B
b10 L
b10 R
b10 Z
b10 `
0J#
1M#
0S#
1V#
13$
1Q$
1o$
1/%
1M%
1k%
1+&
b10 '$
b10 H&
b1 &
b1 F
b1 $$
b1 G&
1_"
1w"
b1101100000011 C
b1101100000011 ("
b1101100000011 ["
1"#
0-"
10"
0E"
1H"
0N"
b1001000000010 D
b1001000000010 )"
b1001000000010 -#
1Q"
b1 '
b1 >
b1 &$
b1 .$
b1 L$
b1 j$
b1 *%
b1 H%
b1 f%
b1 &&
b1 ?
b1 a#
1e#
13#
1K#
b100100000001 @
b100100000001 /#
1T#
b100 2
b100 <
b100 {#
1X"
1g
1&"
1^#
1,#
b100 7
0/
#90000
1'#
0$#
0!#
1|"
0y"
0v"
1d"
0a"
0^"
b10010000000100 (
b10010000000100 A
b10010000000100 Z"
b10010000000100 "$
b1 ,$
b1 0$
14$
0X"
0g
0&"
0^#
0,#
1/
#100000
b0 !
b0 =
b0 h
b0 %$
1d#
b11 H
b11 _#
b11111101 J
b11111101 \
b10000 ($
b10000 D&
b100 $
b100 #$
b100 C&
b11111101 M
b11111101 W
b11111100 V
b11 I
b11 N
b11111101 [
b11111101 e
b11111100 d
1M$
0/$
1S"
0P"
0M"
1J"
0G"
0D"
b100 %
b100 G
12"
0/"
0,"
1S#
1J#
12#
b11 P
b11 S
b11 ^
b11 a
b11 B
b11 L
b11 R
b11 Z
b11 `
16$
1T$
1r$
12%
1P%
1n%
1.&
03$
0Q$
0o$
0/%
0M%
0k%
0+&
b100 '$
b100 H&
b10 &
b10 F
b10 $$
b10 G&
1(#
0%#
0"#
1}"
0z"
0w"
1e"
0b"
b10010000000100 C
b10010000000100 ("
b10010000000100 ["
0_"
1N"
1E"
b1101100000011 D
b1101100000011 )"
b1101100000011 -#
1-"
1h#
b10 '
b10 >
b10 &$
b10 .$
b10 L$
b10 j$
b10 *%
b10 H%
b10 f%
b10 &&
b10 ?
b10 a#
0e#
1W#
0T#
1N#
0K#
16#
b1001000000010 @
b1001000000010 /#
03#
b101 2
b101 <
b101 {#
1X"
1g
1&"
1^#
1,#
b101 7
0/
#110000
1!#
1v"
1^"
b10110100000101 (
b10110100000101 A
b10110100000101 Z"
b10110100000101 "$
b10 J$
b10 N$
1U$
0X"
0g
0&"
0^#
0,#
1/
#120000
b0 !
b0 =
b0 h
b0 %$
0d#
0g#
1j#
b100 H
b100 _#
b11111100 J
b11111100 \
b100000 ($
b100000 D&
b101 $
b101 #$
b101 C&
b11111100 M
b11111100 W
b11111011 V
b100 I
b100 N
b11111100 [
b11111100 e
b11111011 d
1k$
0M$
1,"
1D"
b101 %
b101 G
1M"
02#
05#
18#
b100 P
b100 S
b100 ^
b100 a
b100 B
b100 L
b100 R
b100 Z
b100 `
0J#
0M#
1P#
0S#
0V#
1Y#
13$
1Q$
1o$
1/%
1M%
1k%
1+&
b1000 '$
b1000 H&
b11 &
b11 F
b11 $$
b11 G&
1_"
1w"
b10110100000101 C
b10110100000101 ("
b10110100000101 ["
1"#
0-"
00"
13"
0E"
0H"
1K"
0N"
0Q"
b10010000000100 D
b10010000000100 )"
b10010000000100 -#
1T"
b11 '
b11 >
b11 &$
b11 .$
b11 L$
b11 j$
b11 *%
b11 H%
b11 f%
b11 &&
b11 ?
b11 a#
1e#
13#
1K#
b1101100000011 @
b1101100000011 /#
1T#
b110 2
b110 <
b110 {#
1X"
1g
1&"
1^#
1,#
b110 7
0/
#130000
1$#
0!#
1y"
0v"
1a"
0^"
b11011000000110 (
b11011000000110 A
b11011000000110 Z"
b11011000000110 "$
1s$
b11 h$
b11 l$
1p$
0X"
0g
0&"
0^#
0,#
1/
#140000
b0 !
b0 =
b0 h
b0 %$
1d#
b101 H
b101 _#
b11111011 J
b11111011 \
b1000000 ($
b1000000 D&
b110 $
b110 #$
b110 C&
b11111011 M
b11111011 W
b11111010 V
b101 I
b101 N
b11111011 [
b11111011 e
b11111010 d
1+%
0k$
1P"
0M"
1G"
0D"
b110 %
b110 G
1/"
0,"
1S#
1J#
12#
b101 P
b101 S
b101 ^
b101 a
b101 B
b101 L
b101 R
b101 Z
b101 `
19$
1W$
1u$
15%
1S%
1q%
11&
06$
0T$
0r$
02%
0P%
0n%
0.&
03$
0Q$
0o$
0/%
0M%
0k%
0+&
b10000 '$
b10000 H&
b100 &
b100 F
b100 $$
b100 G&
1%#
0"#
1z"
0w"
1b"
b11011000000110 C
b11011000000110 ("
b11011000000110 ["
0_"
1N"
1E"
b10110100000101 D
b10110100000101 )"
b10110100000101 -#
1-"
1k#
0h#
b100 '
b100 >
b100 &$
b100 .$
b100 L$
b100 j$
b100 *%
b100 H%
b100 f%
b100 &&
b100 ?
b100 a#
0e#
1Z#
0W#
0T#
1Q#
0N#
0K#
19#
06#
b10010000000100 @
b10010000000100 /#
03#
b111 2
b111 <
b111 {#
1X"
1g
1&"
1^#
1,#
b111 7
0/
#150000
1!#
1v"
1^"
b11111100000111 (
b11111100000111 A
b11111100000111 Z"
b11111100000111 "$
b100 (%
b100 ,%
16%
0X"
0g
0&"
0^#
0,#
1/
#160000
b0 !
b0 =
b0 h
b0 %$
0d#
1g#
b110 H
b110 _#
b11111010 J
b11111010 \
b10000000 ($
b10000000 D&
b111 $
b111 #$
b111 C&
b11111010 M
b11111010 W
b11111001 V
b110 I
b110 N
b11111010 [
b11111010 e
b11111001 d
1I%
0+%
1,"
1D"
b111 %
b111 G
1M"
02#
15#
b110 P
b110 S
b110 ^
b110 a
b110 B
b110 L
b110 R
b110 Z
b110 `
0J#
1M#
0S#
1V#
13$
1Q$
1o$
1/%
1M%
1k%
1+&
b100000 '$
b100000 H&
b101 &
b101 F
b101 $$
b101 G&
1_"
1w"
b11111100000111 C
b11111100000111 ("
b11111100000111 ["
1"#
0-"
10"
0E"
1H"
0N"
b11011000000110 D
b11011000000110 )"
b11011000000110 -#
1Q"
b101 '
b101 >
b101 &$
b101 .$
b101 L$
b101 j$
b101 *%
b101 H%
b101 f%
b101 &&
b101 ?
b101 a#
1e#
13#
1K#
b10110100000101 @
b10110100000101 /#
1T#
b1000 2
b1000 <
b1000 {#
1X"
1g
1&"
1^#
1,#
b1000 7
0/
#170000
0'#
0$#
0!#
0|"
0y"
0v"
0d"
0a"
0^"
b0 (
b0 A
b0 Z"
b0 "$
1T%
b101 F%
b101 J%
1N%
0X"
0g
0&"
0^#
0,#
1/
#180000
b0 !
b0 =
b0 h
b0 %$
1d#
b111 H
b111 _#
b11111001 J
b11111001 \
b1 ($
b1 D&
b0 $
b0 #$
b0 C&
b11111001 M
b11111001 W
b11111000 V
b111 I
b111 N
b11111001 [
b11111001 e
b11111000 d
1g%
0I%
0S"
0P"
0M"
0J"
0G"
0D"
b0 %
b0 G
02"
0/"
0,"
1S#
1J#
12#
b111 P
b111 S
b111 ^
b111 a
b111 B
b111 L
b111 R
b111 Z
b111 `
16$
1T$
1r$
12%
1P%
1n%
1.&
03$
0Q$
0o$
0/%
0M%
0k%
0+&
b1000000 '$
b1000000 H&
b110 &
b110 F
b110 $$
b110 G&
0(#
0%#
0"#
0}"
0z"
0w"
0e"
0b"
b0 C
b0 ("
b0 ["
0_"
1N"
1E"
b11111100000111 D
b11111100000111 )"
b11111100000111 -#
1-"
1h#
b110 '
b110 >
b110 &$
b110 .$
b110 L$
b110 j$
b110 *%
b110 H%
b110 f%
b110 &&
b110 ?
b110 a#
0e#
1W#
0T#
1N#
0K#
16#
b11011000000110 @
b11011000000110 /#
03#
b1001 2
b1001 <
b1001 {#
1X"
1g
1&"
1^#
1,#
b1001 7
0/
#190000
1o%
b110 d%
b110 h%
1r%
0X"
0g
0&"
0^#
0,#
1/
#200000
0d#
0g#
0j#
b0 H
b0 _#
b0 J
b0 \
b0 M
b0 W
b11111111 V
b0 I
b0 N
b0 [
b0 e
b11111111 d
1'&
0g%
02#
05#
08#
b0 P
b0 S
b0 ^
b0 a
b0 B
b0 L
b0 R
b0 Z
b0 `
0J#
0M#
0P#
0S#
0V#
0Y#
13$
1Q$
1o$
1/%
1M%
1k%
1+&
b10000000 '$
b10000000 H&
b111 &
b111 F
b111 $$
b111 G&
0-"
00"
03"
0E"
0H"
0K"
0N"
0Q"
b0 D
b0 )"
b0 -#
0T"
b111 '
b111 >
b111 &$
b111 .$
b111 L$
b111 j$
b111 *%
b111 H%
b111 f%
b111 &&
b111 ?
b111 a#
1e#
13#
1K#
b11111100000111 @
b11111100000111 /#
1T#
b1010 2
b1010 <
b1010 {#
1X"
1g
1&"
1^#
1,#
b1010 7
0/
#210000
12&
1/&
b111 $&
b111 (&
1,&
0X"
0g
0&"
0^#
0,#
1/
#220000
0'&
09$
0W$
0u$
05%
0S%
0q%
01&
06$
0T$
0r$
02%
0P%
0n%
0.&
03$
0Q$
0o$
0/%
0M%
0k%
0+&
b1 '$
b1 H&
b0 &
b0 F
b0 $$
b0 G&
0k#
0h#
b0 '
b0 >
b0 &$
b0 .$
b0 L$
b0 j$
b0 *%
b0 H%
b0 f%
b0 &&
b0 ?
b0 a#
0e#
0Z#
0W#
0T#
0Q#
0N#
0K#
09#
06#
b0 @
b0 /#
03#
b1011 2
b1011 <
b1011 {#
1X"
1g
1&"
1^#
1,#
b1011 7
0/
#230000
0X"
0g
0&"
0^#
0,#
1/
#240000
b1100 2
b1100 <
b1100 {#
1X"
1g
1&"
1^#
1,#
b1100 7
0/
#250000
0X"
0g
0&"
0^#
0,#
1/
#260000
b1101 2
b1101 <
b1101 {#
1X"
1g
1&"
1^#
1,#
b1101 7
0/
#270000
0X"
0g
0&"
0^#
0,#
1/
#280000
b1110 2
b1110 <
b1110 {#
1X"
1g
1&"
1^#
1,#
b1110 7
0/
#290000
0X"
0g
0&"
0^#
0,#
1/
#300000
b1111 2
b1111 <
b1111 {#
1X"
1g
1&"
1^#
1,#
b1111 7
0/
#310000
0X"
0g
0&"
0^#
0,#
1/
#320000
b10000 2
b10000 <
b10000 {#
1X"
1g
1&"
1^#
1,#
b10000 7
0/
#330000
0X"
0g
0&"
0^#
0,#
1/
#340000
b10001 2
b10001 <
b10001 {#
1X"
1g
1&"
1^#
1,#
b10001 7
0/
#350000
0X"
0g
0&"
0^#
0,#
1/
#360000
b10010 2
b10010 <
b10010 {#
1X"
1g
1&"
1^#
1,#
b10010 7
0/
#370000
0X"
0g
0&"
0^#
0,#
1/
#380000
b10011 2
b10011 <
b10011 {#
1X"
1g
1&"
1^#
1,#
b10011 7
0/
#390000
0X"
0g
0&"
0^#
0,#
1/
#400000
b10100 2
b10100 <
b10100 {#
1X"
1g
1&"
1^#
1,#
b10100 7
0/
#410000
0X"
0g
0&"
0^#
0,#
1/
#420000
b10101 2
b10101 <
b10101 {#
1X"
1g
1&"
1^#
1,#
b10101 7
0/
#430000
0X"
0g
0&"
0^#
0,#
1/
#440000
b10110 2
b10110 <
b10110 {#
1X"
1g
1&"
1^#
1,#
b10110 7
0/
#450000
0X"
0g
0&"
0^#
0,#
1/
#460000
b10111 2
b10111 <
b10111 {#
1X"
1g
1&"
1^#
1,#
b10111 7
0/
#470000
0X"
0g
0&"
0^#
0,#
1/
#480000
b11000 2
b11000 <
b11000 {#
1X"
1g
1&"
1^#
1,#
b11000 7
0/
#490000
0X"
0g
0&"
0^#
0,#
1/
#500000
b11001 2
b11001 <
b11001 {#
1X"
1g
1&"
1^#
1,#
b11001 7
0/
#510000
0X"
0g
0&"
0^#
0,#
1/
#520000
b11010 2
b11010 <
b11010 {#
1X"
1g
1&"
1^#
1,#
b11010 7
0/
#530000
0X"
0g
0&"
0^#
0,#
1/
#540000
b11011 2
b11011 <
b11011 {#
1X"
1g
1&"
1^#
1,#
b11011 7
0/
#550000
0X"
0g
0&"
0^#
0,#
1/
#560000
b11100 2
b11100 <
b11100 {#
1X"
1g
1&"
1^#
1,#
b11100 7
0/
#570000
0X"
0g
0&"
0^#
0,#
1/
#580000
b11101 2
b11101 <
b11101 {#
1X"
1g
1&"
1^#
1,#
b11101 7
0/
#590000
0X"
0g
0&"
0^#
0,#
1/
#600000
b11110 2
b11110 <
b11110 {#
1X"
1g
1&"
1^#
1,#
b10 :
b0 0
b1110010001100000011110100110000 1
15
b11110 7
0/
#601000
1m
b1 !
b1 =
b1 h
b1 %$
b10 ($
b10 D&
b1 $
b1 #$
b1 C&
b1 #
b1 0
b1 ;
b10 :
b1110010001100010011110100110001 1
#602000
0m
1p
b10 !
b10 =
b10 h
b10 %$
b100 ($
b100 D&
b10 $
b10 #$
b10 C&
b10 #
b10 0
b10 ;
b10 :
b1110010001100100011110100110010 1
#603000
1m
b11 !
b11 =
b11 h
b11 %$
b1000 ($
b1000 D&
b11 $
b11 #$
b11 C&
b11 #
b11 0
b11 ;
b10 :
b1110010001100110011110100110011 1
#604000
0m
0p
1s
b100 !
b100 =
b100 h
b100 %$
b10000 ($
b10000 D&
b100 $
b100 #$
b100 C&
b100 #
b100 0
b100 ;
b10 :
b1110010001101000011110100110100 1
#605000
1m
b101 !
b101 =
b101 h
b101 %$
b100000 ($
b100000 D&
b101 $
b101 #$
b101 C&
b101 #
b101 0
b101 ;
b10 :
b1110010001101010011110100110101 1
#606000
0m
1p
b110 !
b110 =
b110 h
b110 %$
b1000000 ($
b1000000 D&
b110 $
b110 #$
b110 C&
b110 #
b110 0
b110 ;
b10 :
b1110010001101100011110100110110 1
#607000
1m
b111 !
b111 =
b111 h
b111 %$
b10000000 ($
b10000000 D&
b111 $
b111 #$
b111 C&
b111 #
b111 0
b111 ;
b10 :
b1110010001101110011110100110111 1
#608000
b10 :
#610000
0X"
0g
0&"
0^#
0,#
1/
#620000
1d#
1g#
1j#
b111 H
b111 _#
b111 J
b111 \
b111 I
b111 N
1t
1q
b111 [
b111 e
b111 ^
b111 a
b111 M
b111 W
b111 P
b111 S
b111 E
b111 O
b111 T
b111 X
b111 ]
b111 b
b111 f
b111 j
1n
1X"
1g
1&"
1^#
1,#
0/
#630000
0X"
0g
0&"
0^#
0,#
1/
#640000
13$
1Q$
1o$
1/%
1M%
1k%
1+&
16$
1T$
1r$
12%
1P%
1n%
1.&
19$
1W$
1u$
15%
1S%
1q%
11&
1e#
1h#
b111 '
b111 >
b111 &$
b111 .$
b111 L$
b111 j$
b111 *%
b111 H%
b111 f%
b111 &&
b111 ?
b111 a#
1k#
1X"
1g
1&"
1^#
1,#
0/
#650000
0X"
0g
0&"
0^#
0,#
1/
#660000
1X"
1g
1&"
1^#
1,#
0/
#670000
0X"
0g
0&"
0^#
0,#
1/
#680000
1X"
1g
1&"
1^#
1,#
0/
#690000
0X"
0g
0&"
0^#
0,#
1/
#700000
1X"
1g
1&"
1^#
1,#
0/
#708000
